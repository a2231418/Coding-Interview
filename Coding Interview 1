/*From https://youtu.be/4tYoVx0QoN0*/
#include<iostream>
#include<vector>
using namespace std;

class solution_C{
	public:
		solution_C(int** p_matrix, int p_x, int p_y){cout<<"construct solution";
			m_matrix = p_matrix;
			m_x = p_x;
			m_y = p_y;
			//**m_output = (int**)malloc(num*sizeof(int*));
			//int tmp_output[m_x][m_y];
			//m_output = tmp_output;
			vector<int> row;
            row.assign(p_x,-1);
			v_output.assign(p_y,row);
			for(int i = 0; i< m_x; i++){
		    	for(int j = 0; j< m_y; j++)
		            //*((int *)m_output +i*m_y +j )=-1;
		            v_output[i][j]=-1;
	        }
		}
	    void show_input(){cout<<"show_input()\n";
		    for(int i = 0; i< m_x; i++){
		    	for(int j = 0; j< m_y; j++)
		            //cout<<m_matrix[i][j];
		            cout<<*((int *)m_matrix +i*m_y +j );
		        cout<<"\n";
	        }
	        //cout<<"\n";
	    }
	    void show_output(){
		    for(int i = 0; i< m_x; i++){
		    	for(int j = 0; j< m_y; j++)
		            //cout<<*((int *)m_output +i*m_y +j );
					cout<<v_output[i][j];
		        cout<<"\n";
	        }
	        cout<<"\n";
	    }
	//protected:
		int find_neb(int x, int y){
			if(v_output[x][y]==-1){
			    if((*((int *)m_matrix +x*m_y +y )==1)&&(x==0||x==m_x-1||y==0||y==m_y-1)) {v_output[x][y]=1; return 1;}
			    else if((*((int *)m_matrix +x*m_y +y )==1)&&(v_output[x-1][y]==1||v_output[x][y-1])) {v_output[x][y]=1; return 1;}
			    else if((*((int *)m_matrix +x*m_y +y )==1)&&(find_neb(x+1, y)==1||find_neb(x, y+1)==1)) {v_output[x][y]=1; return 1;}
			    else {v_output[x][y]=0; return 0;}
			    //else if(m_matrix[x][y]==0) return 0;
		    }
			
		}
		
	
	private:
		int** m_matrix;
		int** m_output;
		vector< vector<int> > v_output;
		int m_x;
		int m_y;
		//int m_output[m_x][m_y];
};

int main(){
	cout<<"Hello World!\n";
	int m1[6][6]={
	{1, 0, 0, 0, 0, 0},
	{0, 1, 0, 1, 1, 1},
	{0, 0, 1, 0, 1, 0},
	{1, 1, 0, 0, 1, 0},
	{1, 0, 1, 1, 0, 0},
	{1, 0, 0, 0, 0, 1}
	};
	
	solution_C s1((int**)m1, 6, 6);
	s1.show_input();
	s1.show_output();
	for(int i = 0; i< 6; i++){
		    	for(int j = 0; j< 6; j++){
		    	    s1.find_neb(i, j);
				}
	}
	s1.show_output();
} 
